generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  name      String?
  createdAt DateTime @default(now())
  userTools UserTool[]
  accessKeys AccessKey[]
  conversations Conversation[]
}

model Tool {
  id           String   @id @default(uuid())
  name         String
  description  String
  iconUrl      String?
  authProvider String   // e.g., google, github
  authConfig   Json     // client_id, scopes, etc.
  authRequired Boolean @default(false)
  createdAt    DateTime @default(now())
   accessKeys   AccessKey[]  
  userTools    UserTool[]
}

model UserTool {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  tool      Tool     @relation(fields: [toolId], references: [id])
  authorized Boolean @default(false)
  userId    String
  toolId    String
  createdAt DateTime @default(now())

  @@unique([userId, toolId], name: "userTool_userId_toolId")
}

model AccessKey {
  id            String   @id @default(uuid())
  user          User     @relation(fields: [userId], references: [id])
  tool          Tool     @relation(fields: [toolId], references: [id])
  userId        String
  toolId        String
  accessToken   String
  refreshToken  String?
  expiryDate    DateTime
  createdAt     DateTime @default(now())

  @@unique([userId, toolId])
}

model Conversation {
  id          String    @id @default(uuid())
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  title       String
  lastLLM     String    // Store the last used LLM for this conversation
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  messages    Message[]

  @@index([userId, updatedAt])
}

model Message {
  id             String       @id @default(uuid())
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  conversationId String
  role           String       // 'user' or 'assistant'
  content        String       @db.Text
  llmProvider    String?      // Which LLM generated this message (for assistant messages)
  toolResults    Json?        // Store tool execution results
  createdAt      DateTime     @default(now())

  @@index([conversationId, createdAt])
}